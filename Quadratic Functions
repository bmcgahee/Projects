#Author: Ben McGahee
#Date: 7/2/2015
#Title: Quadratic Functions
#Purpose: This program allows you to evaluate, solve, and find the vertex of quadratic functions.

#Import the math module.
import math

#quadFun() returns the function value of any quadratic function, given the values of a, b, c, and x.
def quadFun(a, b, c, x):
    if a == 0:
        return "a cannot be zero"
    else:
        #Quadratic function y = ax^2 + bx + c
        y = float(a*x*x + b*x + c)
        return y

#quadFormula() returns the solution(s) of any quadratic function, given the values of a, b, and c.
def quadFormula(a, b, c):
    if a == 0:
        return "a cannot be zero"
    else:
        #discriminant = b^2 - 4ac
        discriminant = b*b - 4*a*c
        #Negative discriminant yields 2 complex (non-real) solutions.
        if discriminant < 0:
            print "No real solutions exist"
            exit
        #Zero discriminant yields only 1 real solution.
        elif discriminant == 0:
            x = -b/(2*a)
            print "[" + str(x) + " ]"
        else:
            #Positive discriminant yields 2 real solutions.
            x1 = (-b + math.sqrt(discriminant))/(2*a)
            x2 = (-b - math.sqrt(discriminant))/(2*a)
            solutions = [x1, x2]
            return solutions

#vertexFormula() returns the vertex (x, y) of a quadratic function, given the values of a, b, and c.
def vertexFormula(a, b, c):
    if a == 0:
        return "a cannot be zero"
    else:
        #Gets the x and y coordinats of the vertex, stores them into an ordered pair, and returns the ordered pair.
        x = -b/(2*a)
        y = (4*a*c - b*b)/(4*a)
        vertex = (x, y)
        return vertex

    
